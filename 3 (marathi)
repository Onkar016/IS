import math
# ЁЯФ╣ math рд╣реЗ Python рдЪреЗ module рдЖрд╣реЗ. рдпрд╛рдд gcd() (рдорд╣рддреНрддрдо рд╕рд╛рдорд╛рдиреНрдп рд╡рд┐рднрд╛рдЬрдХ) рд╡рд╛рдкрд░рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрдг рд╣реЗ import рдХрд░рддреЛ.

p = int(input("Enter a prime number p: "))
q = int(input("Enter a prime number q: "))
# ЁЯФ╣ рд╡рд╛рдкрд░рдХрд░реНрддреНрдпрд╛рдВрдХрдбреВрди рджреЛрди prime numbers p рдЖрдгрд┐ q рдШреНрдпрд╛рд╡реЗрдд, рд╣реЗ RSA рд╕рд╛рдареА рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗ.

n = p * q
phi = (p - 1) * (q - 1)
# ЁЯФ╣ n рд╣реА modulus value рдЖрд╣реЗ (public рд╡ private key рдордзреНрдпреЗ рд╡рд╛рдкрд░рд▓реА рдЬрд╛рддреЗ).
# ЁЯФ╣ phi рд╣реА Euler's totient function рдЖрд╣реЗ тАУ key рдирд┐рд░реНрдорд╛рдг рдХрд░рддрд╛рдирд╛ рдЦреВрдк рдорд╣рддреНрддреНрд╡рд╛рдЪреА.

e = 2
while e < phi:
    if math.gcd(e, phi) == 1:
        break
    e += 1
# ЁЯФ╣ e рд╣реА public key рдЖрд╣реЗ.
# ЁЯФ╣ gcd(e, phi) = 1 рдореНрд╣рдгрдЬреЗ e рдЖрдгрд┐ phi рдПрдХрдореЗрдХрд╛рдВрдЪреЗ рд╕рд╣рд╕рдо (coprime) рдЖрд╣реЗрдд.
# ЁЯФ╣ рд▓рд╣рд╛рдирд╛рддрд▓рд╛ рдЕрд╕рд╛ e рд╢реЛрдзрддреЛ рдЬреЛ рдпрд╛ рдЕрдЯреАрдВрдирд╛ рдкреВрд░реНрдг рдХрд░рддреЛ.

k = 2
d = ((k * phi) + 1) // e
# ЁЯФ╣ d рд╣реА private key рдЖрд╣реЗ.
# ЁЯФ╣ рд╣реА d рдЕрд╢реА рдЕрд╕рд╛рд╡реА рдХреА (d * e) % phi = 1
# ЁЯФ╣ k рд╣реА рдПрдХ рд╕реЛрдкреА trick рдЖрд╣реЗ d рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА.

print("\nPublic key: (", e, ",", n, ")")
print("Private key: (", d, ",", n, ")")
# ЁЯФ╣ public key (e, n)
# ЁЯФ╣ private key (d, n)
# ЁЯФ╣ рджреЛрдиреНрд╣реА key рд╡рд╛рдкрд░реВрди encryption рд╡ decryption рдХрд░рддрд╛ рдпреЗрддреЗ.

msg = int(input("Enter a number message to encrypt (less than n): "))
# ЁЯФ╣ рд╡рд╛рдкрд░рдХрд░реНрддрд╛ рдПрдХ message input рджреЗрддреЛ (рддреЛ n рдкреЗрдХреНрд╖рд╛ рд▓рд╣рд╛рди рдЕрд╕рд╛рд╡рд╛).

C = pow(msg, e, n)
print("Encrypted message:", C)
# ЁЯФ╣ Encryption formula: C = (M ^ e) mod n
# ЁЯФ╣ pow() рд╣реА Python рдЪреА function рдЖрд╣реЗ рдЬреА efficient modular exponentiation рдХрд░рддреЗ.

M = pow(C, d, n)
print("Decrypted message:", M)
# ЁЯФ╣ Decryption formula: M = (C ^ d) mod n
# ЁЯФ╣ encrypted message C рд╡рд╛рдкрд░реВрди original message M рдкреБрдиреНрд╣рд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рддреЛ.

# ЁЯЯй рдирд┐рд╖реНрдХрд░реНрд╖:
# рд╣рд╛ RSA encryption-decryption рдЪрд╛ рдПрдХ рд╕рд░рд│ рдХреЛрдб рдЖрд╣реЗ.
# рддреБрдордЪрдВ original message encryption рдХреЗрд▓реНрдпрд╛рдирдВрддрд░ cipher text рдордзреНрдпреЗ рд░реВрдкрд╛рдВрддрд░рд┐рдд рд╣реЛрддрдВ.
# рдЖрдгрд┐ рдирдВрддрд░ рддреЗрдЪ cipher text рд╡рд╛рдкрд░реВрди original message рдкрд░рдд рдорд┐рд│рд╡рддрд╛ рдпреЗрддрдВ.
